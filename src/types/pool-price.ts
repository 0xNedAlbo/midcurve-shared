/**
 * PoolPrice - Historic pool price snapshots
 *
 * This interface defines historic price snapshots for liquidity pools.
 * Price snapshots are used for PnL calculations and historical analysis.
 *
 * Supported protocols:
 * - Uniswap V3 (Ethereum, Arbitrum, Base, BSC, Polygon, Optimism)
 * - Future: Orca (Solana), Raydium (Solana), PancakeSwap V3 (BSC)
 */

import type { PoolPriceConfigMap } from './pool-price-config.js';

// Re-export PoolPriceConfigMap for service layer
export type { PoolPriceConfigMap } from './pool-price-config.js';

/**
 * Protocol identifier
 * Derived from PoolPriceConfigMap keys for type safety
 */
export type PoolPriceProtocol = keyof PoolPriceConfigMap;

/**
 * PoolPrice interface with mapped type parameter
 *
 * Type safety: PoolPrice<'uniswapv3'> can only have:
 * - protocol: 'uniswapv3'
 * - config: UniswapV3PoolPriceConfig
 * - state: UniswapV3PoolPriceState
 *
 * Invalid combinations (e.g., Uniswap config with Orca state) are
 * prevented at compile time.
 *
 * @template P - Protocol key from PoolPriceConfigMap ('uniswapv3', etc.)
 */
export interface PoolPrice<P extends keyof PoolPriceConfigMap> {
  /**
   * Unique identifier (cuid)
   * Generated by database on creation
   */
  id: string;

  /**
   * Timestamp when record was created in database
   */
  createdAt: Date;

  /**
   * Timestamp when record was last updated in database
   */
  updatedAt: Date;

  /**
   * Protocol identifier
   * Must match the generic parameter P
   * Identifies which DEX protocol this price snapshot belongs to
   *
   * @example 'uniswapv3'
   */
  protocol: P;

  /**
   * Pool ID reference
   * Foreign key to Pool.id
   *
   * The Pool object is NOT included in this type to avoid circular dependencies
   * and keep the type lightweight. Services can fetch the Pool separately if needed.
   */
  poolId: string;

  /**
   * Timestamp when the price was recorded (from blockchain)
   *
   * For EVM chains, this is the block timestamp.
   * This field allows efficient time-based queries for historical analysis.
   */
  timestamp: Date;

  /**
   * Price of token1 in terms of token0 (smallest units)
   *
   * How much token1 is needed to buy 1 token0 (in smallest units).
   * Expressed in token1's smallest denomination.
   *
   * @example
   * // ETH/USDC pool where token0=USDC (6 decimals), token1=WETH (18 decimals)
   * // If 1 WETH = 2000 USDC
   * // token1PricePerToken0 = how much WETH for 1 USDC
   * // = 1 / 2000 = 0.0005 WETH
   * // = 0.0005 * 10^18 = 500000000000000n
   * token1PricePerToken0 = 500000000000000n
   */
  token1PricePerToken0: bigint;

  /**
   * Price of token0 in terms of token1 (smallest units)
   *
   * How much token0 is needed to buy 1 token1 (in smallest units).
   * Expressed in token0's smallest denomination.
   *
   * @example
   * // ETH/USDC pool where token0=USDC (6 decimals), token1=WETH (18 decimals)
   * // If 1 WETH = 2000 USDC
   * // token0PricePerToken1 = how much USDC for 1 WETH
   * // = 2000 USDC
   * // = 2000 * 10^6 = 2000000000n
   * token0PricePerToken1 = 2000000000n
   */
  token0PricePerToken1: bigint;

  /**
   * Protocol-specific configuration (JSON) - IMMUTABLE
   *
   * Contains immutable parameters specific to the protocol:
   * - Uniswap V3: blockNumber, blockTimestamp
   *
   * Type is determined by the protocol parameter P.
   * For PoolPrice<'uniswapv3'>, this will be UniswapV3PoolPriceConfig.
   *
   * @see uniswapv3/pool-price-config.ts for specific config types
   */
  config: PoolPriceConfigMap[P]['config'];

  /**
   * Protocol-specific state (JSON) - IMMUTABLE for historic snapshots
   *
   * Contains protocol-specific price state at the recorded time:
   * - Uniswap V3: sqrtPriceX96, tick
   *
   * Type is determined by the protocol parameter P.
   * For PoolPrice<'uniswapv3'>, this will be UniswapV3PoolPriceState.
   *
   * Note: For TypeScript, state uses bigint. In database, bigint values are stored as strings.
   *
   * @see uniswapv3/pool-price-state.ts for specific state types
   */
  state: PoolPriceConfigMap[P]['state'];
}

// Re-export type aliases
export type { UniswapV3PoolPrice, AnyPoolPrice } from './uniswapv3/pool-price.js';
