/**
 * Pool Discovery Result Types
 *
 * Generic types for pool discovery results across all protocols.
 * Protocol-agnostic design supports Uniswap V3, Orca, Raydium, and future protocols.
 */

import type { Pool } from './pool.js';
import type { PoolConfigMap } from './pool-config.js';

/**
 * Pool discovery result
 *
 * Generic type P constrains to protocol keys from PoolConfigMap.
 * Each protocol can provide different pool naming conventions and metrics.
 *
 * @template P - Protocol identifier ('uniswapv3', etc.)
 *
 * @example
 * ```typescript
 * // Uniswap V3 pool discovery result
 * const result: PoolDiscoveryResult<'uniswapv3'> = {
 *   poolName: "CL10-WETH/USDC",
 *   fee: 500,
 *   protocol: 'uniswapv3',
 *   tvlUSD: "123456789.50",
 *   volumeUSD: "12345678.90",
 *   feesUSD: "1234.56",
 *   pool: uniswapV3Pool
 * };
 * ```
 */
export interface PoolDiscoveryResult<P extends keyof PoolConfigMap> {
  /**
   * Protocol-dependent pool name
   *
   * Format examples:
   * - Uniswap V3: "CL10-WETH/USDC" (CL = Concentrated Liquidity, 10 = tick spacing)
   * - Orca: "WHIRLPOOL-SOL/USDC"
   * - Raydium: "CLMM-SOL/USDC"
   *
   * The format is protocol-specific and generated by the pool discovery service.
   */
  poolName: string;

  /**
   * Fee in basis points (BIPS)
   *
   * Examples:
   * - 100 = 0.01%
   * - 500 = 0.05%
   * - 3000 = 0.3%
   * - 10000 = 1%
   */
  fee: number;

  /**
   * Protocol identifier
   *
   * Matches the protocol field from Pool type.
   * Used for type narrowing and protocol-specific logic.
   */
  protocol: P;

  /**
   * Total Value Locked in USD (from subgraph/indexer)
   *
   * String format to handle large numbers without precision loss.
   * Defaults to "0" if subgraph/indexer unavailable.
   * Service MUST fail if subgraph returns errors (not just unavailable).
   *
   * @example "234567890.75"
   */
  tvlUSD: string;

  /**
   * 24-hour trading volume in USD (from subgraph/indexer)
   *
   * String format to handle large numbers without precision loss.
   * Defaults to "0" if subgraph/indexer unavailable.
   *
   * @example "23456789.12"
   */
  volumeUSD: string;

  /**
   * 24-hour fees collected in USD (from subgraph/indexer)
   *
   * String format to handle large numbers without precision loss.
   * Defaults to "0" if subgraph/indexer unavailable.
   *
   * @example "2345.67"
   */
  feesUSD: string;

  /**
   * Full pool object with tokens, state, and config
   *
   * Type-safe: For PoolDiscoveryResult<'uniswapv3'>, this is UniswapV3Pool.
   * Contains all pool data including:
   * - token0 and token1 (full Token objects)
   * - Pool configuration (immutable)
   * - Pool state (mutable, current on-chain state)
   */
  pool: Pool<P>;
}

/**
 * Type alias for Uniswap V3 pool discovery result
 *
 * Convenience type for Uniswap V3-specific pool discovery.
 * Ensures pool field is UniswapV3Pool.
 */
export type UniswapV3PoolDiscoveryResult = PoolDiscoveryResult<'uniswapv3'>;

// Future protocol aliases (add as needed):
// export type OrcaPoolDiscoveryResult = PoolDiscoveryResult<'orca'>;
// export type RaydiumPoolDiscoveryResult = PoolDiscoveryResult<'raydium'>;
