/**
 * Position APR Period
 *
 * Represents a time period for APR calculation based on position ledger events.
 * Each period is bounded by liquidity/collect events and tracks fee collection performance.
 *
 * Period Boundaries:
 * - Start: Position creation (INCREASE_POSITION) or last COLLECT event
 * - End: Next COLLECT event or current time (for active periods)
 *
 * APR Calculation:
 * APR (basis points) = (collectedFeeValue / costBasis) × (SECONDS_PER_YEAR / durationSeconds) × 10000
 *
 * Example:
 * - Cost basis: 10,000 USDC
 * - Fees collected: 50 USDC over 7 days
 * - APR = (50 / 10,000) × (31,557,600 / 604,800) × 10000
 *       = 0.005 × 52.17857 × 10000
 *       = 2609 basis points (26.09%)
 *
 * All monetary values are in quote token smallest units (e.g., micro-USDC for USDC).
 */

/**
 * Position APR Period
 *
 * A time period with associated fee collection and APR metrics.
 */
export interface PositionAprPeriod {
  // ==========================================================================
  // DATABASE FIELDS
  // ==========================================================================

  /**
   * Unique identifier (cuid)
   * Generated by database on creation
   */
  id: string;

  /**
   * Timestamp when period record was created in database
   */
  createdAt: Date;

  /**
   * Timestamp when period record was last updated in database
   */
  updatedAt: Date;

  // ==========================================================================
  // POSITION REFERENCE
  // ==========================================================================

  /**
   * Position this APR period belongs to
   * Foreign key reference to Position.id
   */
  positionId: string;

  // ==========================================================================
  // PERIOD BOUNDARIES
  // ==========================================================================

  /**
   * Event that started this period
   *
   * Can be:
   * - First INCREASE_POSITION event (position creation)
   * - Previous COLLECT event
   *
   * Foreign key reference to PositionLedgerEvent.id
   */
  startEventId: string;

  /**
   * Event that ended this period
   *
   * Can be:
   * - Next COLLECT event (period completed)
   * - Last event in history (active period, fees still accumulating)
   *
   * Foreign key reference to PositionLedgerEvent.id
   */
  endEventId: string;

  // ==========================================================================
  // TIME RANGE
  // ==========================================================================

  /**
   * When this period started (blockchain timestamp)
   * Corresponds to startEvent.timestamp
   */
  startTimestamp: Date;

  /**
   * When this period ended (blockchain timestamp)
   * Corresponds to endEvent.timestamp
   */
  endTimestamp: Date;

  /**
   * Duration of this period in seconds
   * Calculated as: endTimestamp - startTimestamp (in seconds)
   *
   * Used for annualizing the APR calculation.
   */
  durationSeconds: number;

  // ==========================================================================
  // FINANCIAL METRICS
  // ==========================================================================

  /**
   * Average cost basis during this period
   * In smallest quote token units (e.g., micro-USDC)
   *
   * Calculation:
   * - Average of costBasisAfter across all events in period
   * - Represents capital at risk for fee generation
   *
   * @example
   * // Position with 10,000 USDC cost basis
   * costBasis = 10000_000000n
   */
  costBasis: bigint;

  /**
   * Total fees collected during this period
   * In smallest quote token units (e.g., micro-USDC)
   *
   * Calculation:
   * - Sum of rewards.tokenValue for COLLECT events in period
   * - Excludes principal (only pure fees)
   *
   * @example
   * // 50 USDC collected in fees
   * collectedFeeValue = 50_000000n
   */
  collectedFeeValue: bigint;

  // ==========================================================================
  // APR METRIC
  // ==========================================================================

  /**
   * Annual Percentage Rate in basis points
   *
   * Formula:
   * APR (bps) = (collectedFeeValue / costBasis) × (SECONDS_PER_YEAR / durationSeconds) × 10000
   *
   * Where:
   * - SECONDS_PER_YEAR = 365.25 × 24 × 60 × 60 = 31,557,600
   * - 10000 converts to basis points (1 bps = 0.01%)
   *
   * @example
   * // 50 USDC fees on 10,000 USDC over 7 days
   * // APR = (50 / 10,000) × (31,557,600 / 604,800) × 10000
   * //     = 0.005 × 52.17857 × 10000
   * //     = 2609 basis points (26.09%)
   * aprBps = 2609
   */
  aprBps: number;

  // ==========================================================================
  // DEBUGGING/AUDITING
  // ==========================================================================

  /**
   * Number of events included in period calculation
   *
   * Useful for:
   * - Validating APR calculation
   * - Understanding period composition
   * - Debugging discrepancies
   */
  eventCount: number;
}

// ============================================================================
// HELPER TYPES
// ============================================================================

/**
 * APR Period Summary
 *
 * Simplified view for dashboard/analytics.
 */
export interface AprPeriodSummary {
  /**
   * Period identifier
   */
  id: string;

  /**
   * Time range
   */
  startTimestamp: Date;
  endTimestamp: Date;
  durationDays: number; // durationSeconds / 86400

  /**
   * APR percentage (e.g., 26.09 for 26.09%)
   */
  aprPercent: number; // aprBps / 100

  /**
   * Fees collected (human-readable, in quote token units)
   * @example "50.00 USDC"
   */
  feesCollected: string;

  /**
   * Is this period still active (no COLLECT event yet)?
   */
  isActive: boolean;
}
