/**
 * Pool - Abstract interface for liquidity pools across multiple DEX protocols
 *
 * This interface defines pools with full Token objects and protocol-specific
 * config/state using mapped types for type safety.
 *
 * Supported protocols:
 * - Uniswap V3 (Ethereum, Arbitrum, Base, BSC, Polygon, Optimism)
 * - Future: Orca (Solana), Raydium (Solana), PancakeSwap V3 (BSC)
 */

import type { Token } from './token.js';
import type { PoolConfigMap } from './pool-config.js';

// Re-export PoolConfigMap for service layer
export type { PoolConfigMap } from './pool-config.js';

/**
 * Protocol identifier
 * Derived from PoolConfigMap keys for type safety
 */
export type Protocol = keyof PoolConfigMap;

/**
 * Pool type identifier
 * - 'CL_TICKS': Concentrated liquidity with tick-based pricing (Uniswap V3 style)
 * Extensible for other pool types (constant product, stable pools, etc.)
 */
export type PoolType = 'CL_TICKS';

/**
 * Pool interface with mapped type parameter
 *
 * Type safety: Pool<'uniswapv3'> can only have:
 * - protocol: 'uniswapv3'
 * - config: UniswapV3PoolConfig
 * - state: UniswapV3PoolState
 * - token0: Token<'erc20'>
 * - token1: Token<'erc20'>
 *
 * Invalid combinations (e.g., Uniswap config with Orca state, or ERC-20 token
 * with Solana pool) are prevented at compile time.
 *
 * @template P - Protocol key from PoolConfigMap ('uniswapv3', etc.)
 */
export interface Pool<P extends keyof PoolConfigMap> {
  /**
   * Unique identifier (cuid)
   * Generated by database on creation
   */
  id: string;

  /**
   * Timestamp when pool was created
   */
  createdAt: Date;

  /**
   * Timestamp when pool was last updated
   */
  updatedAt: Date;

  /**
   * Protocol identifier
   * Must match the generic parameter P
   * Identifies which DEX protocol this pool belongs to
   *
   * @example 'uniswapv3'
   */
  protocol: P;

  /**
   * Pool type identifier
   * Identifies the pool mechanism (concentrated liquidity, constant product, etc.)
   *
   * Currently only 'CL_TICKS' (concentrated liquidity with tick-based ranges)
   * is supported. Other types may be added in the future.
   *
   * @example 'CL_TICKS'
   */
  poolType: PoolType;

  /**
   * First token in the pair
   * Full Token object with type determined by PoolConfigMap[P]['token0Type']
   *
   * By convention, token0 < token1 (by address/mint comparison)
   * For Uniswap V3, this will be Token<'erc20'>
   *
   * To access token ID: pool.token0.id
   */
  token0: Token<PoolConfigMap[P]['token0Type']>;

  /**
   * Second token in the pair
   * Full Token object with type determined by PoolConfigMap[P]['token1Type']
   *
   * By convention, token1 > token0 (by address/mint comparison)
   * For Uniswap V3, this will be Token<'erc20'>
   *
   * To access token ID: pool.token1.id
   */
  token1: Token<PoolConfigMap[P]['token1Type']>;

  /**
   * Fee tier in basis points
   *
   * Examples:
   * - 100 = 0.01% (1 bps)
   * - 500 = 0.05% (5 bps)
   * - 3000 = 0.3% (30 bps)
   * - 10000 = 1% (100 bps)
   */
  feeBps: number;

  /**
   * Protocol-specific configuration (JSON) - IMMUTABLE
   *
   * Contains immutable pool parameters specific to the protocol:
   * - Uniswap V3: chainId, address, token0, token1, feeBps, tickSpacing
   *
   * Type is determined by the protocol parameter P.
   * For Pool<'uniswapv3'>, this will be UniswapV3PoolConfig.
   *
   * @see uniswapv3/pool-config.ts for specific config types
   */
  config: PoolConfigMap[P]['config'];

  /**
   * Protocol-specific state (JSON) - MUTABLE
   *
   * Contains mutable pool state that changes over time:
   * - Uniswap V3: sqrtPriceX96, currentTick, liquidity, feeGrowthGlobal0, feeGrowthGlobal1
   *
   * Type is determined by the protocol parameter P.
   * For Pool<'uniswapv3'>, this will be UniswapV3PoolState.
   *
   * Note: For TypeScript, state uses bigint. In database, bigint values are stored as strings.
   *
   * @see uniswapv3/pool-state.ts for specific state types
   */
  state: PoolConfigMap[P]['state'];
}

// Re-export type aliases
export type { UniswapV3Pool, AnyPool } from './uniswapv3/pool.js';
